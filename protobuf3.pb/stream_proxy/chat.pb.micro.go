// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stream_proxy/chat.proto

package stream_gateway

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StreamProxyService service

type StreamProxyService interface {
	// Add more RPC methods as needed
	ProxyChatGPTStream(ctx context.Context, opts ...client.CallOption) (StreamProxyService_ProxyChatGPTStreamService, error)
}

type streamProxyService struct {
	c    client.Client
	name string
}

func NewStreamProxyService(name string, c client.Client) StreamProxyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "stream_proxy"
	}
	return &streamProxyService{
		c:    c,
		name: name,
	}
}

func (c *streamProxyService) ProxyChatGPTStream(ctx context.Context, opts ...client.CallOption) (StreamProxyService_ProxyChatGPTStreamService, error) {
	req := c.c.NewRequest(c.name, "StreamProxyService.ProxyChatGPTStream", &ProxyChatGPTStreamReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &streamProxyServiceProxyChatGPTStream{stream}, nil
}

type StreamProxyService_ProxyChatGPTStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ProxyChatGPTStreamReq) error
	Recv() (*ProxyChatGPTStreamResp, error)
}

type streamProxyServiceProxyChatGPTStream struct {
	stream client.Stream
}

func (x *streamProxyServiceProxyChatGPTStream) Close() error {
	return x.stream.Close()
}

func (x *streamProxyServiceProxyChatGPTStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamProxyServiceProxyChatGPTStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamProxyServiceProxyChatGPTStream) Send(m *ProxyChatGPTStreamReq) error {
	return x.stream.Send(m)
}

func (x *streamProxyServiceProxyChatGPTStream) Recv() (*ProxyChatGPTStreamResp, error) {
	m := new(ProxyChatGPTStreamResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamProxyService service

type StreamProxyServiceHandler interface {
	// Add more RPC methods as needed
	ProxyChatGPTStream(context.Context, StreamProxyService_ProxyChatGPTStreamStream) error
}

func RegisterStreamProxyServiceHandler(s server.Server, hdlr StreamProxyServiceHandler, opts ...server.HandlerOption) error {
	type streamProxyService interface {
		ProxyChatGPTStream(ctx context.Context, stream server.Stream) error
	}
	type StreamProxyService struct {
		streamProxyService
	}
	h := &streamProxyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StreamProxyService{h}, opts...))
}

type streamProxyServiceHandler struct {
	StreamProxyServiceHandler
}

func (h *streamProxyServiceHandler) ProxyChatGPTStream(ctx context.Context, stream server.Stream) error {
	return h.StreamProxyServiceHandler.ProxyChatGPTStream(ctx, &streamProxyServiceProxyChatGPTStreamStream{stream})
}

type StreamProxyService_ProxyChatGPTStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ProxyChatGPTStreamResp) error
	Recv() (*ProxyChatGPTStreamReq, error)
}

type streamProxyServiceProxyChatGPTStreamStream struct {
	stream server.Stream
}

func (x *streamProxyServiceProxyChatGPTStreamStream) Close() error {
	return x.stream.Close()
}

func (x *streamProxyServiceProxyChatGPTStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamProxyServiceProxyChatGPTStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamProxyServiceProxyChatGPTStreamStream) Send(m *ProxyChatGPTStreamResp) error {
	return x.stream.Send(m)
}

func (x *streamProxyServiceProxyChatGPTStreamStream) Recv() (*ProxyChatGPTStreamReq, error) {
	m := new(ProxyChatGPTStreamReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
