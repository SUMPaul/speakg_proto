// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: stream_proxy/chat.proto

package stream_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamProxyService_ProxyChatGPTStream_FullMethodName = "/stream_proxy.StreamProxyService/ProxyChatGPTStream"
)

// StreamProxyServiceClient is the client API for StreamProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamProxyServiceClient interface {
	// Add more RPC methods as needed
	ProxyChatGPTStream(ctx context.Context, opts ...grpc.CallOption) (StreamProxyService_ProxyChatGPTStreamClient, error)
}

type streamProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamProxyServiceClient(cc grpc.ClientConnInterface) StreamProxyServiceClient {
	return &streamProxyServiceClient{cc}
}

func (c *streamProxyServiceClient) ProxyChatGPTStream(ctx context.Context, opts ...grpc.CallOption) (StreamProxyService_ProxyChatGPTStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamProxyService_ServiceDesc.Streams[0], StreamProxyService_ProxyChatGPTStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamProxyServiceProxyChatGPTStreamClient{stream}
	return x, nil
}

type StreamProxyService_ProxyChatGPTStreamClient interface {
	Send(*ProxyChatGPTStreamReq) error
	Recv() (*ProxyChatGPTStreamResp, error)
	grpc.ClientStream
}

type streamProxyServiceProxyChatGPTStreamClient struct {
	grpc.ClientStream
}

func (x *streamProxyServiceProxyChatGPTStreamClient) Send(m *ProxyChatGPTStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamProxyServiceProxyChatGPTStreamClient) Recv() (*ProxyChatGPTStreamResp, error) {
	m := new(ProxyChatGPTStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamProxyServiceServer is the server API for StreamProxyService service.
// All implementations should embed UnimplementedStreamProxyServiceServer
// for forward compatibility
type StreamProxyServiceServer interface {
	// Add more RPC methods as needed
	ProxyChatGPTStream(StreamProxyService_ProxyChatGPTStreamServer) error
}

// UnimplementedStreamProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamProxyServiceServer struct {
}

func (UnimplementedStreamProxyServiceServer) ProxyChatGPTStream(StreamProxyService_ProxyChatGPTStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyChatGPTStream not implemented")
}

// UnsafeStreamProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamProxyServiceServer will
// result in compilation errors.
type UnsafeStreamProxyServiceServer interface {
	mustEmbedUnimplementedStreamProxyServiceServer()
}

func RegisterStreamProxyServiceServer(s grpc.ServiceRegistrar, srv StreamProxyServiceServer) {
	s.RegisterService(&StreamProxyService_ServiceDesc, srv)
}

func _StreamProxyService_ProxyChatGPTStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamProxyServiceServer).ProxyChatGPTStream(&streamProxyServiceProxyChatGPTStreamServer{stream})
}

type StreamProxyService_ProxyChatGPTStreamServer interface {
	Send(*ProxyChatGPTStreamResp) error
	Recv() (*ProxyChatGPTStreamReq, error)
	grpc.ServerStream
}

type streamProxyServiceProxyChatGPTStreamServer struct {
	grpc.ServerStream
}

func (x *streamProxyServiceProxyChatGPTStreamServer) Send(m *ProxyChatGPTStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamProxyServiceProxyChatGPTStreamServer) Recv() (*ProxyChatGPTStreamReq, error) {
	m := new(ProxyChatGPTStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamProxyService_ServiceDesc is the grpc.ServiceDesc for StreamProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_proxy.StreamProxyService",
	HandlerType: (*StreamProxyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyChatGPTStream",
			Handler:       _StreamProxyService_ProxyChatGPTStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_proxy/chat.proto",
}
